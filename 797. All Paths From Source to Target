class Solution {
public:
    
    void dfs(int pos, vector<vector<int>>& graph, vector<int>& visited, int N, vector<int>& path, vector<vector<int>> &ans){
        
        if(pos == N-1){
            ans.push_back(path);
            return;
        }
        if(visited[pos] == 1){
            return;
        }else{
            visited[pos] = 1;
        }
        for(int i = 0; i < graph[pos].size(); i++){
            path[pos] = graph[pos][i];
            dfs(graph[pos][i],graph,visited,N,path,ans);
        }
        visited[pos] = 0;
        path[pos] = 0;
        return;        
        
    }
    
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        int N = graph.size(), i = 0;
        vector<int> visited(N);
        vector<int> path(N);
        vector<vector<int>> ans;
        vector<vector<int>> sol;
        dfs(0,graph,visited,N,path,ans);
        for(i = 0; i < ans.size(); i++){
            vector<int> tmppath;
            int pos = 0;
            while(1){
                tmppath.push_back(pos);
                if(pos == N-1){
                    break;
                }
                pos = ans[i][pos];
            }
            sol.push_back(tmppath);
            
        }
        return sol;
        
    }
};
